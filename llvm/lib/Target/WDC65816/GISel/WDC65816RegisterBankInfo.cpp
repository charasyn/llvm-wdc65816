//===-- WDC65816RegisterBankInfo.cpp --------------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the RegisterBankInfo class for WDC65816.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "WDC65816RegisterBankInfo.h"
#include "WDC65816InstrInfo.h" // For the register classes
#include "WDC65816Subtarget.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/RegisterBank.h"
#include "llvm/CodeGen/RegisterBankInfo.h"
#include "llvm/CodeGen/TargetRegisterInfo.h"

#define GET_TARGET_REGBANK_IMPL
#include "WDC65816GenRegisterBank.inc"

using namespace llvm;

// FIXME: TableGen this.
// If it grows too much and TableGen still isn't ready to do the job, extract it
// into an WDC65816GenRegisterBankInfo.def (similar to AArch64).
namespace llvm {
namespace WDC65816 {
enum PartialMappingIdx {
  PMI_GPR,
  PMI_Min = PMI_GPR,
};

const RegisterBankInfo::PartialMapping PartMappings[]{
    // GPR Partial Mapping
    {0, 32, GPRRegBank},
};

enum ValueMappingIdx {
  InvalidIdx = 0,
  GPR3OpsIdx = 1,
};

const RegisterBankInfo::ValueMapping ValueMappings[] = {
    // invalid
    {nullptr, 0},
    // 3 operands in GPRs
    {&PartMappings[PMI_GPR - PMI_Min], 1},
    {&PartMappings[PMI_GPR - PMI_Min], 1},
    {&PartMappings[PMI_GPR - PMI_Min], 1},

};
} // end namespace WDC65816
} // end namespace llvm

WDC65816RegisterBankInfo::WDC65816RegisterBankInfo(const TargetRegisterInfo &TRI)
    : WDC65816GenRegisterBankInfo() {}

const RegisterBank &
WDC65816RegisterBankInfo::getRegBankFromRegClass(const TargetRegisterClass &RC,
                                             LLT) const {
  return getRegBank(WDC65816::GPRRegBankID);
}

const RegisterBankInfo::InstructionMapping &
WDC65816RegisterBankInfo::getInstrMapping(const MachineInstr &MI) const {
  auto Opc = MI.getOpcode();

  if (!isPreISelGenericOpcode(Opc)) {
    const InstructionMapping &Mapping = getInstrMappingImpl(MI);
    if (Mapping.isValid())
      return Mapping;
  }

  using namespace TargetOpcode;

  unsigned NumOperands = MI.getNumOperands();
  const ValueMapping *OperandsMapping = &WDC65816::ValueMappings[WDC65816::GPR3OpsIdx];

  switch (Opc) {
  case G_ADD:
  case G_SUB:
  case G_MUL:
  case G_SDIV:
  case G_UDIV:
  case G_LOAD:
  case G_STORE: {
    OperandsMapping = &WDC65816::ValueMappings[WDC65816::GPR3OpsIdx];
    break;
  }

  case G_CONSTANT:
  case G_FRAME_INDEX:
    OperandsMapping =
        getOperandsMapping({&WDC65816::ValueMappings[WDC65816::GPR3OpsIdx], nullptr});
    break;
  default:
    return getInvalidInstructionMapping();
  }

  return getInstructionMapping(DefaultMappingID, /*Cost=*/1, OperandsMapping,
                               NumOperands);
}
